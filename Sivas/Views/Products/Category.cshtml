@using PagedList.Mvc
@using Sivas.Extension
@model PagedList.IPagedList<Sivas.Models.Products>

@{
    ViewBag.Title = "Category";
    const string imageRoot = "~/image";
    const string imageExtension = ".png";
}

@section styles{
    <link href="~/Content/customLand.css" rel="stylesheet" />
    <link href="~/Content/customPort.css" rel="stylesheet" />
}
<script type="text/javascript">
    function GoToRoom(id) {
        window.location = '@Html.Raw(@Url.Action("Details", "Products"))' + '?id=' + id;
    }
</script>

<div class="ProductContainer" itemscope itemtype="http://schema.org/Product">
    @foreach (var item in Model)
    {
        var imageFolder = item.Landscape switch
        {
            true => "EnergyStarLand",
            false => "EnergyStarPort"
        };

        <div class="product" @("onclick=GoToRoom('" + item.Id + "')")>
            <div class="Overlap"><span class="Text">More Details</span></div>
            <div @(item.Landscape ? "class=product_ImageLand" : "class=product_ImagePort")>
                @{
                    var message = item.Category + " " + item.Model;
                }
                <img @(item.Landscape ? "class=product_ImageLand" : "class=product_ImagePort") alt="@message" itemprop="image" src="@($"data:image/gif;base64,{Convert.ToBase64String(item.Image)}")" />
            </div>
            <div @(item.Landscape ? "class=product_DescriptionLand" : "class=product_DescriptionPort")>
                @*<span class="Category">@Html.DisplayFor(model => item.Category)</span>*@
                <span class="Company">@Html.DisplayFor(model => item.Company)</span>
                <span class="Model" itemprop="name">@Html.DisplayFor(model => item.Model)</span>
                <span class="Brand">@Html.DisplayFor(model => item.Brand)</span>
                @*<span class="Image">@Html.DisplayFor(model => item.Image)</span>*@
                @*<span class="Landscape">@Html.DisplayFor(model => item.Landscape)</span>*@
                @*<span class="EneryStar">@Html.DisplayFor(model => item.EnergyStar)</span>*@
                <span class="EneryStar">
                    @{
                        var productStar = item.EnergyStar.GetEnergyStar();
                        if (productStar != "")
                        {
                            <img src="@($"{imageRoot}/{imageFolder}/{productStar}{imageExtension}")" alt="" />
                        }
                    }
                </span>
                <span itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                    <span class="Price" itemprop="price">@Html.DisplayFor(model => item.Price)</span>
                </span>
                @{
                    if (item.Offer)
                    {
                        <span class="Offer">
                            <img src="@($"{imageRoot}/{imageFolder}/Offer.png")" alt="" />
                        </span>
                    }
                }

                <span class="Color">@Html.DisplayFor(model => item.Color)</span>
                <span class="Specification">
                    @{
                        var displaySpecification = "<ul><li>";
                        if (item.Specification.Contains("~"))
                        {
                            displaySpecification += item.Specification.Replace("~", "</li><li>");
                        }
                        else
                        {
                            displaySpecification += item.Specification;
                        }
                        displaySpecification += "</li></ul>";
                        item.Specification = displaySpecification;
                    }
                    @Html.Raw(Server.HtmlDecode(item.Specification))
                </span>
                <span class="Description" itemprop="description">@Html.DisplayFor(model => item.Description)</span>
            </div>
        </div>
    }
</div>
@Html.PagedListPager(Model, page => Url.Action("Category", new { page, category = Request.QueryString["category"] }), new PagedListRenderOptions { Display = PagedListDisplayMode.IfNeeded })